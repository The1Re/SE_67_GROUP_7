import api from "@/api";
import { Trip } from "@/models/Trip";
import { User } from "@/models/User";
import { useEffect, useState } from "react";
import { FaCar, FaClock } from "react-icons/fa";
import { useNavigate} from "react-router-dom";
import { MouseEvent } from "react"; 

interface TripCardProps {
  tripId: number;
}

const TripCard: React.FC<TripCardProps> = ({ tripId }) => {
  const navigate = useNavigate();
  const [trip, setTrip] = useState<Trip | null>(null);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    console.log("tripIdcard",tripId);
    const fetchTrip = async () => {
      try {
        const res = await api.get(`/trips/${tripId}`);
        setTrip(res.data);
        console.log(res.data);
      } catch (error) {
        console.error(error); // Changed from err to error
      }
    };
    fetchTrip(); // Also need to call the function
  }, [tripId]);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await api.get(`/users/${trip?.ownerTripId}`, {
          headers: { Authorization: "Bearer " + localStorage.getItem("token") },
        });
        setUser(res.data);
      } catch (error) {
        console.error(error);
      }
    };
    fetchUser();
  }, [trip]);

  const calculateRemainingDays = () => {
    if (!trip?.dateStart) return 0;

    const startDate = new Date(trip.dateStart);
    const currentDate = new Date();

    // Calculate difference in milliseconds and convert to days
    const diffTime = startDate.getTime() - currentDate.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return diffDays > 0 ? diffDays : 0;
  };

  const formatThaiDate = (date: Date) => {
    const day = date.getDate();
    const year = date.getFullYear();

    const thaiMonths = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
      "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
      "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
      "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
      "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
      "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
      "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
      "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
      "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
    ];

    const month = thaiMonths[date.getMonth()];

    return `${day} ${month} ${year}`;
  };
  const calculateTripDuration = () => {
    if (!trip?.dateStart || !trip?.dateEnd) return 0;

    const startDate = new Date(trip.dateStart);
    const endDate = new Date(trip.dateEnd);

    // Calculate difference in milliseconds and convert to days
    const diffTime = endDate.getTime() - startDate.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return diffDays > 0 ? diffDays : 1; // Return at least 1 day if same day or invalid dates
  };
  const formatThaiDateTime = (date: Date) => {
    const day = date.getDate();
    const year = date.getFullYear() % 100; // Get last two digits of year (Buddhist year - 2500)

    const thaiMonths = [
      "‡∏°.‡∏Ñ.",
      "‡∏Å.‡∏û.",
      "‡∏°‡∏µ.‡∏Ñ.",
      "‡πÄ‡∏°.‡∏¢.",
      "‡∏û.‡∏Ñ.",
      "‡∏°‡∏¥.‡∏¢.",
      "‡∏Å.‡∏Ñ.",
      "‡∏™.‡∏Ñ.",
      "‡∏Å.‡∏¢.",
      "‡∏ï.‡∏Ñ.",
      "‡∏û.‡∏¢.",
      "‡∏ò.‡∏Ñ.",
    ];

    const month = thaiMonths[date.getMonth()];

    // Format time as HH:MM
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");

    return `${day} ${month} ${year} ‡πÄ‡∏ß‡∏•‡∏≤ ${hours}:${minutes} ‡∏ô.`;
  };

  const translateVehicle = (vehicleType: string) => {
    switch (vehicleType.toLowerCase()) {
      case "van":
        return "‡∏£‡∏ñ‡∏ï‡∏π‡πâ";
      case "bus":
        return "‡∏£‡∏ñ‡∏ó‡∏±‡∏ß‡∏£‡πå";
      default:
        return vehicleType; // Return the original value if not matching
    }
  };
  const formatPrice = (price: number | undefined) => {
    if (price === undefined) return "Loading...";
    return price === 0 ? "FREE" : `${price.toLocaleString()} ‡∏ø`;
  };
  // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
  const [participantCount, setParticipantCount] = useState(0);

  // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
  useEffect(() => {
    const fetchParticipantCount = async () => {
      if (!trip?.id) return;
  
      try {
        console.log("Fetching participant count for tripId:", trip.id);
  
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const response = await api.get(`/orders?tripId=${trip.id}`, {
          headers: { Authorization: "Bearer " + localStorage.getItem("token") },
        });
        console.log("API Response:", response.data);
  
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        let count = 0;
        
        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array
        if (Array.isArray(response.data)) {
          count = response.data.reduce((total, order) => {
            return total + (order.amountPerson || 0);
          }, 0);
        } 
        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property ‡πÄ‡∏õ‡πá‡∏ô array
        else if (response.data && Array.isArray(response.data.orders)) {
          count = response.data.orders.reduce((total, order) => {
            return total + (order.amountPerson || 0);
          }, 0);
        }
        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å order ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        else if (response.data && response.data.amountPerson) {
          count = response.data.amountPerson;
        }
  
        console.log("Calculated participant count:", count);
        setParticipantCount(count);
      } catch (error) {
        console.error("Error fetching participant count:", error);
        setParticipantCount(0);
      }
    };
  
    fetchParticipantCount();
  }, [trip?.id]);
  
  const isTripFull = participantCount === (trip?.maxPerson || 0);

  const handleBuyTrip = (event: MouseEvent<HTMLButtonElement>) => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reload ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    event.preventDefault();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (isTripFull) {
      return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const token = localStorage.getItem("token");
    if (!token) {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      navigate("/login", { state: { from: `/trips/${tripId}` } });
      return;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏£‡∏¥‡∏õ
    navigate(`/trips/${tripId}/purchase`);
  };
  

  return (
    <div className="max-w-full w-full mx-auto p-6">
      <div className="flex flex-col justify-between gap-4 sm:flex-row sm:gap-0">
        {/* üîπ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á & ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á */}
        <div className="flex gap-4 px-2 sm:px-0">
          <a
            target="_blank"
            className="flex h-[45px] w-[45px] shrink-0 overflow-hidden rounded-full shadow-sm"
            href="/profile"
          >
            <img
              src="https://i.pravatar.cc/45"
              alt="fernfunnys.journey"
              className="rounded-full object-cover"
            />
          </a>
          <div className="flex flex-col">
            <h1 className="flex-wrap text-xl font-bold">
              {trip ? trip.title : "Loading..."}
            </h1>
            <div className="flex w-full items-center gap-4 mobile:gap-2">
              <a
                target="_blank"
                className="text-[14px] font-medium mobile:max-w-44 truncate hover:underline"
                href="/profile"
              >
                {user ? user.fullName : "Loading..."}
              </a>
            </div>
            <div className="mt-2 flex w-fit items-center justify-start gap-1 text-[11px] text-gray-500">
              <span>‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {trip ? calculateRemainingDays() : 0} ‡∏ß‡∏±‡∏ô</span>
            </div>

            {/* üîπ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ */}
            <div className="mt-3">
              <h1 className="text-gray-700 font-bold">
                ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£{" "}
                {trip ? formatThaiDate(new Date(trip.dateStart)) : "Loading..."}{" "}
                „Äê{trip ? calculateTripDuration() : "?"} Day„Äë
              </h1>

              <h3 className="text-gray-600 text-lg font-bold flex items-center gap-2">
                <FaClock />{" "}
                {trip
                  ? formatThaiDateTime(new Date(trip.dateStart))
                  : "Loading..."}{" "}
                -{" "}
                {trip
                  ? formatThaiDateTime(new Date(trip.dateEnd))
                  : "Loading..."}
              </h3>

              <h3 className="text-gray-600 text-lg font-bold flex items-center gap-2">
                <FaCar /> ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢{" "}
                {trip?.vehicle ? translateVehicle(trip.vehicle) : "Loading..."}
              </h3>

              <p className="mt-3 text-black-500 text-xl leading-relaxed">
                {trip ? trip.description : "Loading..."}
              </p>
            </div>
          </div>
        </div>

        {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏£‡∏¥‡∏õ */}
        <div className="flex flex-col items-end gap-3">
        <button
          className={`cursor-pointer px-6 py-2 rounded-md font-semibold ${
            isTripFull
              ? "bg-gray-400 cursor-not-allowed" // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ï‡πá‡∏°
              : "bg-teal-500 text-white hover:bg-teal-600" // ‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
          }`}
          onClick={handleBuyTrip}
          disabled={isTripFull} // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ï‡πá‡∏°
        >
          {isTripFull ? "‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß" : "‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏£‡∏¥‡∏õ"}
        </button>

          <div className="flex flex-col items-end gap-1">
            <p className="text-2xl font-extrabold text-black">
              {formatPrice(trip?.price)}
            </p>
            <h1 className="text-red-500 text-lg font-semibold">
              {participantCount}/{trip?.maxPerson}
            </h1>

            <h3 className="text-red-500 text-lg font-semibold">‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</h3>
          </div>
        </div>
      </div>
      <div className="text-[12px] mt-6 border-t text-gray-400"></div>
    </div>
  );
};

export default TripCard;