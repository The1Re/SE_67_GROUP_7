import React, { useEffect, useState } from "react";
import Table from "@/components/Tableguide/Table";
import TableHeader from "@/components/Tableguide/TableHeader";
import TableRow from "@/components/Tableguide/TableRow";
import TableCell from "@/components/Tableguide/TableCell";
import Button from "@/components/Tableguide/Button";
import Header from "@/components/Tableguide/Header";
import SubmitPopup from "@/pages/Guide/SubmitPop";
import { useParams } from "react-router-dom";
import axios from "axios";

// ‚úÖ Define button type to enforce type safety
type ButtonType = "refresh" | "form-code";

// ‚úÖ Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
interface Document {
  id: number;
  name: string;
  date: string;
  buttonType: ButtonType;
}

// ‚úÖ URL API
const API_BASE_URL = "https://rkhgjh4q-3000.asse.devtunnels.ms/api";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
const DocumentPage = () => {
  const { tripId } = useParams<{ tripId: string }>(); // üìö ‡∏î‡∏∂‡∏á tripId ‡∏à‡∏≤‡∏Å URL

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á tripId ‡πÉ‡∏ô console
  console.log("üîç ‡∏Ñ‡πà‡∏≤ tripId ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å URL:", tripId);

  const [documents, setDocuments] = useState<Document[]>([]);
  const [tripTitle, setTripTitle] = useState<string>(""); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);
  const [inputCode, setInputCode] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    const fetchTripDetails = async () => {
      console.log(`üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tripId: ${tripId}`);
      setLoading(true);
      try {
        const response = await axios.get(`${API_BASE_URL}/trips/${tripId}`);
        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", response.data);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if (response.data && response.data.User && response.data.dateStart) {
          const tripData = response.data;

          // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ title ‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏ô Header
          setTripTitle(tripData.title || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ");

          // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Document
          const formattedData: Document[] = [
            {
              id: tripData.id,
              name: tripData.User.fullName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
              date: formatDate(tripData.dateStart),
              buttonType: "form-code",
            },
          ];

          setDocuments(formattedData);
        } else {
          setDocuments([]);
          setTripTitle("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ");
        }
      } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏î‡πâ:", error);
        setTripTitle("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏î‡πâ");
      } finally {
        setLoading(false);
      }
    };

    if (tripId) {
      fetchTripDetails();
    }
  }, [tripId]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô dd/mm/yyyy
  const formatDate = (isoDate: string) => {
    const dateObj = new Date(isoDate);
    const day = String(dateObj.getDate()).padStart(2, "0");
    const month = String(dateObj.getMonth() + 1).padStart(2, "0");
    const year = dateObj.getFullYear();
    return `${day}/${month}/${year}`;
  };

  // ‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const columns = [
    { title: "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", align: "left" },
    { title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", align: "left" },
    { title: "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠", align: "center" },
  ];

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Popup ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î
  const handleFormCodeClick = () => {
    setIsPopupOpen(true);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
  const handlePopupSubmit = () => {
    if (inputCode.trim() === "") {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    console.log("‚úÖ Submitted code:", inputCode);
    setIsPopupOpen(false);
    setIsConfirmationOpen(true);
  };

  // ‚úÖ ‡∏õ‡∏¥‡∏î Popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const handleConfirmationClose = () => {
    setIsConfirmationOpen(false);
    setInputCode("");
    setError("");
  };

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á input
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (value.length <= 4) {
      setInputCode(value);
      if (value.trim() !== "") setError("");
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4 bg-white rounded-lg shadow-md">
      {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ */}
      <Header title={`‡∏•‡∏π‡∏Å‡∏ó‡∏£‡∏¥‡∏õ - ${tripTitle}`} />

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <Table>
        <TableHeader columns={columns} />
        <tbody>
          {loading ? (
            <TableRow>
              <TableCell colSpan={3} align="center">
                ‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
              </TableCell>
            </TableRow>
          ) : documents.length > 0 ? (
            documents.map((doc) => (
              <TableRow key={doc.id}>
                <TableCell>{doc.name}</TableCell>
                <TableCell>{doc.date}</TableCell>
                <TableCell align="center">
                  <Button
                    type={doc.buttonType}
                    onClick={
                      doc.buttonType === "form-code"
                        ? handleFormCodeClick
                        : undefined
                    }
                  >
                    {doc.buttonType === "refresh" ? "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß" : "‡∏Å‡∏£‡∏≠‡∏Å Code"}
                  </Button>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={3} align="center">
                ‚õîÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
              </TableCell>
            </TableRow>
          )}
        </tbody>
      </Table>

      {/* ‚úÖ Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î */}
      {isPopupOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 backdrop-blur-md">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full">
            <h2 className="text-lg font-bold mb-4">‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î</h2>
            <input
              type="text"
              value={inputCode}
              onChange={handleInputChange}
              className="w-full p-2 border border-gray-300 rounded mb-2"
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î (4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
              maxLength={4}
            />
            {error && <p className="text-red-500 text-sm mb-2">{error}</p>}
            <div className="flex justify-end gap-2">
              <button
                className="bg-red-500 text-white px-4 py-2 rounded"
                onClick={() => {
                  setIsPopupOpen(false);
                  setError("");
                }}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded"
                onClick={handlePopupSubmit}
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ Popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
      <SubmitPopup isOpen={isConfirmationOpen} onClose={handleConfirmationClose} />
    </div>
  );
};

export default DocumentPage;
